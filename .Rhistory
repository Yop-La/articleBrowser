xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes"){
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE))
}
parseMapping(pathMapping, pathParsing)
tabMapping<-read.csv("./response/parsing.txt")
tabMapping<-read.csv("./response/parsing.txt")
write.row.csv<-function(row,pathParsing){
write(paste('"',paste(row,collapse='","'),'"',sep=""),
pathParsing,
append = TRUE)
}
setSemTypes<-function(row,semType){
firstIndiceSemTypes <- 6 # à changer si on ajoute des éléments à la ligne
allSemTypes <-semTypesTable$aapp
rowSemTypesToAdd <- allSemTypes == semType
nbSemTypes <- length(allSemTypes)
if(length(row) < nbSemTypes){
return(c(row,rowSemTypesToAdd))
}else{
rowSemTypes = row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)]
rowSemTypes = rowSemTypesToAdd | as.logical(rowSemTypes)
row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)] <- rowSemTypes
}
}
pathMapping = "./response/1499357819_1eb903d79a62238f86775703bda39fb8.xml"
pathParsing = "./response/parsing.txt"
tabMapping<-read.csv("./response/parsing.txt")
parseMapping<-function(pathMapping,pathParsing){
if(file.exists(pathParsing)){
file.remove(pathParsing)
}
file.create(pathParsing)
xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes"){
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
.state$count = .state$count + 1
print(.state$count)
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE,count=0))
}
parseMapping(pathMapping, pathParsing)
parseMapping<-function(pathMapping,pathParsing){
if(file.exists(pathParsing)){
file.remove(pathParsing)
}
file.create(pathParsing)
xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes"){
print(attrs)
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE,count=0))
}
parseMapping(pathMapping, pathParsing)
setSemTypes<-function(row,semType){
firstIndiceSemTypes <- 6 # à changer si on ajoute des éléments à la ligne
allSemTypes <-semTypesTable$aapp
rowSemTypesToAdd <- allSemTypes == semType
nbSemTypes <- length(allSemTypes)
if(length(row) < nbSemTypes){
return(c(row,rowSemTypesToAdd))
}else{
rowSemTypes = row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)]
rowSemTypes = rowSemTypesToAdd | as.logical(rowSemTypes)
row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)] <- rowSemTypes
}
}
pathMapping = "./response/1499357819_1eb903d79a62238f86775703bda39fb8.xml"
pathParsing = "./response/parsing.txt"
tabMapping<-read.csv("./response/parsing.txt")
parseMapping<-function(pathMapping,pathParsing){
if(file.exists(pathParsing)){
file.remove(pathParsing)
}
file.create(pathParsing)
xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes" & .state$inFirstMapping){
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE,count=0))
}
parseMapping(pathMapping, pathParsing)
tabMapping<-read.csv("./response/parsing.txt")
tabMapping<-read.csv("./response/parsing.txt")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c("PMID","token","CUI","concpteName",semTypesTable$aapp)
levels(semTypesTable$aapp)
load("tampon.RData")
mappingTable<<-read.csv(pathParsing,
header = FALSE,
col.names = c("PMID","token","CUI","concpteName",levels(semTypesTable$aapp)))
load("tampon.RData")
mappingTable<<-read.csv(pathParsing,
header = FALSE,
col.names = c("PMID","phraseID","token","CUI","concpteName",levels(semTypesTable$aapp)))
View(mappingTable)
concepts_table[1,c("tisu")]
nrow(mappingTable)
allSemTypes <-semTypesTable$aapp
allSemTypes
allSemTypes == semType
allSemTypes == "acab"
nrow(mappingTable)
nrow(semTypesTable)
View(mappingTable)
mappingTable[,137]
mappingTable[,"acab"]
mappingTable[,"tisu"]
mappingTable[1,"tisu"]
mappingTable[2,"tisu"]
parseMapping<-function(pathMapping,pathParsing){
if(file.exists(pathParsing)){
file.remove(pathParsing)
}
file.create(pathParsing)
xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes" & .state$inFirstMapping){
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE,count=0))
}
setSemTypes<-function(row,semType){
firstIndiceSemTypes <- 6 # à changer si on ajoute des éléments à la ligne
allSemTypes <-semTypesTable$aapp
rowSemTypesToAdd <- allSemTypes == semType
nbSemTypes <- length(allSemTypes)
if(length(row) < nbSemTypes){
return(c(row,rowSemTypesToAdd))
}else{
rowSemTypes = row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)]
rowSemTypes = rowSemTypesToAdd | as.logical(rowSemTypes)
row[firstIndiceSemTypes:(firstIndiceSemTypes-1+nbSemTypes)] <- rowSemTypes
}
return(row)
}
parseMapping<-function(pathMapping,pathParsing){
if(file.exists(pathParsing)){
file.remove(pathParsing)
}
file.create(pathParsing)
xmlEventParse(pathMapping,
handlers = list(
startElement=function(name, attrs,.state = state){
.state$name<- name
if(name == "UttText"){
.state$idUttText = .state$idUttText + 1
.state$row[2] <- .state$idUttText
}
if(name == "Mappings"){
.state$inFirstMapping = FALSE
.state$indiceMapping = 0
}
if(name == "Mapping"){
.state$indiceMapping = .state$indiceMapping + 1
if(.state$indiceMapping == 1){
.state$inFirstMapping = TRUE
}else{
.state$inFirstMapping = FALSE
}
}
if(name == "SemTypes" & .state$inFirstMapping){
.state$nbSemType = attrs[1]
.state$indiceSemType = 0
if(.state$nbSemType == 0){
.state$row <- setSemTypes(.state$row,"pasunsemtype")
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
},
text=function(content,.state = state){
if(.state$name=="PMID"){
.state$row[1] <- content
}
if(.state$name=="PhraseText"){
.state$row[3] <- content
}
if(.state$name=="CandidateCUI" & .state$inFirstMapping){
.state$row[4] <- content
}
if(.state$name=="CandidateMatched" & .state$inFirstMapping){
.state$row[5] <- content
}
if(.state$name=="SemType" & .state$inFirstMapping){
.state$row <- setSemTypes(.state$row,content)
.state$indiceSemType = .state$indiceSemType + 1
if(.state$nbSemType==.state$indiceSemType){
write.row.csv(.state$row,pathParsing)
.state$row=.state$row[1:5]
}
}
.state
}
# ,
# endElement=function(name, attrs,state=.state){
#   if(name=="SemTypes"){
#
#   }
#   .state
# }
),
state = list(idUttText=0,row=character(1),inFirstMapping=FALSE,count=0))
}
pathParsing <<-generateFileName(sample(c("a","b","c","d","e","f"), 20, replace=T),"txt")
pathMapping="./response/1499374209_7cd537a9be7462a134abe2d7a96c67b6.xml"
parseMapping(pathMapping,pathParsing)
mappingTable<<-read.csv(pathParsing,
header = FALSE,
col.names = c("PMID","phraseID","token","CUI","concpteName",levels(semTypesTable$aapp)))
View(mappingTable)
is.na(mappingTable)
length(is.na(mappingTable)==TRUE)
sum(is.na(mappingTable))
rsconnect::deployApp(".")
